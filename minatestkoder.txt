app.post("/login", (req, res) => {
  const { username, password } = req.body;
  // Requires a sqlite3 database
  db.get("SELECT * FROM user WHERE email = ?", [username], (err, user) => {
    if (err) {
      console.log(err);
      res.status(500).send({ error: "Server error" });
    } else if (!user) {
      res.status(401).send({ error: "User not found" });
    } else {
      const result = bcrypt.compare(password, toString(user.password));
      if (result) {
        console.log("you wellcome in your session again");
        req.session.islagdin = true;

        res.redirect("/");
      } else {
        res.status(401).send({ error: "Wrong password" });
      }
    }
  });
});
app.get("/api/users/:id", async (req, res) => {
  const id = req.params.id;

  try {
    const profile = await getUserProfile(id);

    if (profile) {
      res.render("user.handlebars", profile);
    } else {
      res.status(404).json({ error: "The profile is not found" });
    }
  } catch (err) {
    console.error("Error:", err);
    res.status(500).json({ error: "Server error" });
  }
});

function getUserProfile(id) {
  return new Promise(async (resolve, reject) => {
    try {
      const userResult = await queryDb(
        "SELECT * from userprofile where email = ?",
        [id],
        false
      );
      if (!userResult) {
        resolve(null);
        return;
      }

      const profile = { ...userResult };

      const skillsResult = await queryDb(
        "SELECT * from skills where userPid = ?",
        [userResult.userPid],
        true
      );
      if (skillsResult) {
        profile.skills = skillsResult;
      }

      const educationResult = await queryDb(
        "SELECT * from education where userPid = ?",
        [userResult.userPid],
        true
      );
      if (educationResult) {
        profile.education = educationResult;
      }

      const experienceResult = await queryDb(
        "SELECT * from Experience where userPid = ?",
        [userResult.userPid],
        true
      );
      if (experienceResult) {
        profile.experience = experienceResult;
      }

      resolve(profile);
    } catch (err) {
      reject(err);
    }
  });
}




function queryDb(query, params, all) {
  return new Promise((resolve, reject) => {
    if (all) {
      db.all(query, params, (err, result) => {
        if (err) {
          reject(err);
        } else {
          resolve(result);
        }
      });
    } else {
      db.get(query, params, (err, result) => {
        if (err) {
          reject(err);
        } else {
          resolve(result);
        }
      });
    }
  });
}


app.post("/register", (req, res) => {
  const { username, password, fname, lname, gender } = req.body;
  const { jobTitle, startDate, endDate, place } = req.body;
  // Requires bcrypt to be installed
  const hash = bcrypt.hashSync(password, 10);
  // Requires a sqlite3 database
  db.run(
    "INSERT INTO user (email, password, fname, lname, gender, uRole) VALUES (?, ?,?,? ,?,?)",
    [username, hash, fname, lname, gender, "visitor"],
    "INSERT INTO Experience (jobTitle, startDate, endDate, place) VALUES (?, ?,?,?)",
    [jobTitle, startDate, endDate, place],
    (err) => {
      if (err) {
        console.log(err);

        res.status(500).send({ error: "Server error" });
      } else {
        res.redirect("/login");
      }
    }
  );
});
app.get("/logout", (req, res) => {
  req.session.destroy((err) => {
    console.log("Error while destroying the session :", err);
  });
  console.log("logged out");
  res.redirect("/");
});

input {
  width: 700px;
  padding: 10px;
  margin: 5px 0;
  border: none;
  outline: none;
  font-size: 16px;
  border-bottom: 1px solid black;
  background: transparent;
}
body {
  background-image: url("/img/pexels-edward-jenner-4253060.jpg");
  background-size: cover;
  background-repeat: no-repeat;
}

section a {
  color: white;
}
 